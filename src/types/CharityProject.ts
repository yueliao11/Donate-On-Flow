/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CharityProjectInterface extends utils.Interface {
  functions: {
    "createProject(string,string,uint256)": FunctionFragment;
    "donate(uint256)": FunctionFragment;
    "projectCount()": FunctionFragment;
    "projects(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createProject"
      | "donate"
      | "projectCount"
      | "projects"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;

  events: {
    "DonationReceived(uint256,address,uint256)": EventFragment;
    "ProjectCreated(uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DonationReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
}

export interface DonationReceivedEventObject {
  projectId: BigNumber;
  donor: string;
  amount: BigNumber;
}
export type DonationReceivedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DonationReceivedEventObject
>;

export type DonationReceivedEventFilter =
  TypedEventFilter<DonationReceivedEvent>;

export interface ProjectCreatedEventObject {
  projectId: BigNumber;
  title: string;
  targetAmount: BigNumber;
}
export type ProjectCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ProjectCreatedEventObject
>;

export type ProjectCreatedEventFilter = TypedEventFilter<ProjectCreatedEvent>;

export interface CharityProject extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CharityProjectInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProject(
      title: string,
      description: string,
      targetAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    donate(
      projectId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    projectCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    projects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, boolean] & {
        title: string;
        description: string;
        targetAmount: BigNumber;
        currentAmount: BigNumber;
        owner: string;
        isActive: boolean;
      }
    >;
  };

  createProject(
    title: string,
    description: string,
    targetAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  donate(
    projectId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  projectCount(overrides?: CallOverrides): Promise<BigNumber>;

  projects(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string, boolean] & {
      title: string;
      description: string;
      targetAmount: BigNumber;
      currentAmount: BigNumber;
      owner: string;
      isActive: boolean;
    }
  >;

  callStatic: {
    createProject(
      title: string,
      description: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donate(projectId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    projectCount(overrides?: CallOverrides): Promise<BigNumber>;

    projects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, boolean] & {
        title: string;
        description: string;
        targetAmount: BigNumber;
        currentAmount: BigNumber;
        owner: string;
        isActive: boolean;
      }
    >;
  };

  filters: {
    "DonationReceived(uint256,address,uint256)"(
      projectId?: BigNumberish | null,
      donor?: string | null,
      amount?: null
    ): DonationReceivedEventFilter;
    DonationReceived(
      projectId?: BigNumberish | null,
      donor?: string | null,
      amount?: null
    ): DonationReceivedEventFilter;

    "ProjectCreated(uint256,string,uint256)"(
      projectId?: BigNumberish | null,
      title?: null,
      targetAmount?: null
    ): ProjectCreatedEventFilter;
    ProjectCreated(
      projectId?: BigNumberish | null,
      title?: null,
      targetAmount?: null
    ): ProjectCreatedEventFilter;
  };

  estimateGas: {
    createProject(
      title: string,
      description: string,
      targetAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    donate(
      projectId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    projectCount(overrides?: CallOverrides): Promise<BigNumber>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createProject(
      title: string,
      description: string,
      targetAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    donate(
      projectId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    projectCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
