/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CharityProject,
  CharityProjectInterface,
} from "../CharityProject";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "projectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "donor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DonationReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "projectId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "targetAmount",
        type: "uint256",
      },
    ],
    name: "ProjectCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "targetAmount",
        type: "uint256",
      },
    ],
    name: "createProject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "projectId",
        type: "uint256",
      },
    ],
    name: "donate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "projectCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "projects",
    outputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "targetAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f37806100206000396000f3fe60806040526004361061003f5760003560e01c8063107046bd1461004457806323c554481461008657806336fbad26146100af578063f14faf6f146100da575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906105da565b6100f6565b60405161007d96959493929190610702565b60405180910390f35b34801561009257600080fd5b506100ad60048036038101906100a891906108a6565b61026f565b005b3480156100bb57600080fd5b506100c4610410565b6040516100d19190610931565b60405180910390f35b6100f460048036038101906100ef91906105da565b610416565b005b60006020528060005260406000206000915090508060000180546101199061097b565b80601f01602080910402602001604051908101604052809291908181526020018280546101459061097b565b80156101925780601f1061016757610100808354040283529160200191610192565b820191906000526020600020905b81548152906001019060200180831161017557829003601f168201915b5050505050908060010180546101a79061097b565b80601f01602080910402602001604051908101604052809291908181526020018280546101d39061097b565b80156102205780601f106101f557610100808354040283529160200191610220565b820191906000526020600020905b81548152906001019060200180831161020357829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16905086565b600081116102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a990610a1e565b60405180910390fd5b600160008154809291906102c590610a6d565b91905055506040518060c00160405280848152602001838152602001828152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600115158152506000806001548152602001908152602001600020600082015181600001908161033a9190610c61565b5060208201518160010190816103509190610c61565b50604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff0219169083151502179055509050506001547f6245d01eb0db8df9242165c3ee1e2324367f93303d7b8f6a86e38a8767e643ae8483604051610403929190610d33565b60405180910390a2505050565b60015481565b60008111801561042857506001548111155b610467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045e90610daf565b60405180910390fd5b60008082815260200190815260200160002060040160149054906101000a900460ff166104c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c090610e1b565b60405180910390fd5b6000341161050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610ead565b60405180910390fd5b60008060008381526020019081526020016000209050348160030160008282546105369190610ecd565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16827f0b5b4c52969ff7329ecf7ee536409fda87812b15a8622bc6e8cdeab3aee14a26346040516105849190610931565b60405180910390a35050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6105b7816105a4565b81146105c257600080fd5b50565b6000813590506105d4816105ae565b92915050565b6000602082840312156105f0576105ef61059a565b5b60006105fe848285016105c5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610641578082015181840152602081019050610626565b60008484015250505050565b6000601f19601f8301169050919050565b600061066982610607565b6106738185610612565b9350610683818560208601610623565b61068c8161064d565b840191505092915050565b6106a0816105a4565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106d1826106a6565b9050919050565b6106e1816106c6565b82525050565b60008115159050919050565b6106fc816106e7565b82525050565b600060c082019050818103600083015261071c818961065e565b90508181036020830152610730818861065e565b905061073f6040830187610697565b61074c6060830186610697565b61075960808301856106d8565b61076660a08301846106f3565b979650505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107b38261064d565b810181811067ffffffffffffffff821117156107d2576107d161077b565b5b80604052505050565b60006107e5610590565b90506107f182826107aa565b919050565b600067ffffffffffffffff8211156108115761081061077b565b5b61081a8261064d565b9050602081019050919050565b82818337600083830152505050565b6000610849610844846107f6565b6107db565b90508281526020810184848401111561086557610864610776565b5b610870848285610827565b509392505050565b600082601f83011261088d5761088c610771565b5b813561089d848260208601610836565b91505092915050565b6000806000606084860312156108bf576108be61059a565b5b600084013567ffffffffffffffff8111156108dd576108dc61059f565b5b6108e986828701610878565b935050602084013567ffffffffffffffff81111561090a5761090961059f565b5b61091686828701610878565b9250506040610927868287016105c5565b9150509250925092565b60006020820190506109466000830184610697565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061099357607f821691505b6020821081036109a6576109a561094c565b5b50919050565b7f54617267657420616d6f756e74206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b6000610a08602483610612565b9150610a13826109ac565b604082019050919050565b60006020820190508181036000830152610a37816109fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a78826105a4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610aaa57610aa9610a3e565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610b177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ada565b610b218683610ada565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610b5e610b59610b54846105a4565b610b39565b6105a4565b9050919050565b6000819050919050565b610b7883610b43565b610b8c610b8482610b65565b848454610ae7565b825550505050565b600090565b610ba1610b94565b610bac818484610b6f565b505050565b5b81811015610bd057610bc5600082610b99565b600181019050610bb2565b5050565b601f821115610c1557610be681610ab5565b610bef84610aca565b81016020851015610bfe578190505b610c12610c0a85610aca565b830182610bb1565b50505b505050565b600082821c905092915050565b6000610c3860001984600802610c1a565b1980831691505092915050565b6000610c518383610c27565b9150826002028217905092915050565b610c6a82610607565b67ffffffffffffffff811115610c8357610c8261077b565b5b610c8d825461097b565b610c98828285610bd4565b600060209050601f831160018114610ccb5760008415610cb9578287015190505b610cc38582610c45565b865550610d2b565b601f198416610cd986610ab5565b60005b82811015610d0157848901518255600182019150602085019450602081019050610cdc565b86831015610d1e5784890151610d1a601f891682610c27565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152610d4d818561065e565b9050610d5c6020830184610697565b9392505050565b7f496e76616c69642070726f6a6563742049440000000000000000000000000000600082015250565b6000610d99601283610612565b9150610da482610d63565b602082019050919050565b60006020820190508181036000830152610dc881610d8c565b9050919050565b7f50726f6a656374206973206e6f74206163746976650000000000000000000000600082015250565b6000610e05601583610612565b9150610e1082610dcf565b602082019050919050565b60006020820190508181036000830152610e3481610df8565b9050919050565b7f446f6e6174696f6e20616d6f756e74206d75737420626520677265617465722060008201527f7468616e20300000000000000000000000000000000000000000000000000000602082015250565b6000610e97602683610612565b9150610ea282610e3b565b604082019050919050565b60006020820190508181036000830152610ec681610e8a565b9050919050565b6000610ed8826105a4565b9150610ee3836105a4565b9250828201905080821115610efb57610efa610a3e565b5b9291505056fea26469706673582212207084277dd2ba504b1d8246109160a183a6117239608ff5f4ffa5161063ba50cf64736f6c63430008130033";

type CharityProjectConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CharityProjectConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CharityProject__factory extends ContractFactory {
  constructor(...args: CharityProjectConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<CharityProject> {
    return super.deploy(overrides || {}) as Promise<CharityProject>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CharityProject {
    return super.attach(address) as CharityProject;
  }
  override connect(signer: Signer): CharityProject__factory {
    return super.connect(signer) as CharityProject__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CharityProjectInterface {
    return new utils.Interface(_abi) as CharityProjectInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CharityProject {
    return new Contract(address, _abi, signerOrProvider) as CharityProject;
  }
}
